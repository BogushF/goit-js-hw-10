{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst buttonStart = document.querySelector('[data-start]');\nconst inputDate = document.querySelector('#datetime-picker');\nconst timerDays = document.querySelector('[data-days]');\nconst timerHours = document.querySelector('[data-hours]');\nconst timerMinutes = document.querySelector('[data-minutes]');\nconst timerSeconds = document.querySelector('[data-seconds]');\n\nbuttonStart.disabled = true;\nlet userSelectDate = null;\nlet intervalId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0].getTime() > Date.now()) {\n      buttonStart.disabled = false;\n      userSelectDate = selectedDates[0].getTime();\n    } else {\n      iziToast.error({\n        title: 'Error',\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n      buttonStart.disabled = true;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nbuttonStart.addEventListener('click', () => {\n  buttonStart.disabled = true;\n  inputDate.disabled = true;\n\n  intervalId = setInterval(() => {\n    const diff = userSelectDate - Date.now();\n    const { days, hours, minutes, seconds } = convertMs(diff);\n\n    timerDays.textContent = addLeadingZero(days);\n    timerHours.textContent = addLeadingZero(hours);\n    timerMinutes.textContent = addLeadingZero(minutes);\n    timerSeconds.textContent = addLeadingZero(seconds);\n\n    if (diff < 1000) {\n      clearInterval(intervalId);\n      inputDate.disabled = false;\n    }\n  }, 1000);\n});\n"],"names":["buttonStart","inputDate","timerDays","timerHours","timerMinutes","timerSeconds","userSelectDate","intervalId","options","selectedDates","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","diff"],"mappings":"+IAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5DL,EAAY,SAAW,GACvB,IAAIM,EAAiB,KACjBC,EAAa,KAEjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,OACpCT,EAAY,SAAW,GACvBM,EAAiBG,EAAc,CAAC,EAAE,QAAO,IAEzCC,EAAS,MAAM,CACb,MAAO,QACP,SAAU,WACV,QAAS,oCACjB,CAAO,EACDV,EAAY,SAAW,GAE1B,CACH,EAEAW,EAAU,mBAAoBH,CAAO,EAErC,SAASI,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEAnB,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBC,EAAU,SAAW,GAErBM,EAAa,YAAY,IAAM,CAC7B,MAAMa,EAAOd,EAAiB,KAAK,IAAG,EAChC,CAAE,KAAAQ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUQ,CAAI,EAExDlB,EAAU,YAAcgB,EAAeJ,CAAI,EAC3CX,EAAW,YAAce,EAAeH,CAAK,EAC7CX,EAAa,YAAcc,EAAeF,CAAO,EACjDX,EAAa,YAAca,EAAeD,CAAO,EAE7CG,EAAO,MACT,cAAcb,CAAU,EACxBN,EAAU,SAAW,GAExB,EAAE,GAAI,CACT,CAAC"}